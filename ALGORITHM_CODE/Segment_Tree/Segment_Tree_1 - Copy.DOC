SEGMENT TREE:

#include<bits/stdc++.h>
using namespace std;

#define mx 100010
#define sc(x) scanf("%d",&x);
int ara[mx],tree[3*mx],n;

void init(int node,int b,int e)
{
    int left,right,mid;
    if(b==e){
        tree[node]=ara[b];
        return;
    }

    left=2*node;
    right=2*node+1;
    mid=(b+e)/2;

    init(left,b,mid);
    init(right,mid+1,e);
    tree[node]=tree[left]+tree[right];
    return;
}

int query(int node,int b,int e,int i,int j)
{
    int left,right,mid,p1,p2;
    if(i>e or b>j)return 0;
    if(b>=i and e<=j) return tree[node];
    left=2*node;
    right=2*node+1;
    mid=(b+e)/2;

    p1=query(left,b,mid,i,j);
    p2=query(right,mid+1,e,i,j);
    return p1+p2;
}

void update(int node,int b,int e,int i,int value)
{
    int left,right,mid;
    if(i>e or i<b)return;
    if(b>=i and e<=i ){
        tree[node]=value;
        return;
    }
    left=2*node;
    right=2*node+1;
    mid=(b+e)/2;

    update(left,b,mid,i,value);
    update(right,mid+1,e,i,value);
    tree[node]=tree[left]+tree[right];
}

int main()
{
    while(cin>>n)
    {
        for(int i=1;i<=n;i++)
            sc(ara[i]);
        init(1,1,n);

        int q,a,b;
        cin>>q;
        while(q--){
            cin>>a>>b;
            cout<<query(1,1,n,a,b)<<endl;
            cin>>a>>b;
            update(1,1,n,a,b);
        }

    }
}

